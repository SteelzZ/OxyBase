<?php
class AccountGeneral implements MySecureAccount_WebService_Account_General_V1r0_GeneralInterface
{        
    /**
     * @var MySecureAccount_Lib_Remote_Invoker_ReadService
     */
    private $_readService;
    
    /**
     * @var MySecureAccount_Lib_Remote_Invoker_WriteService
     */
    private $_writeService;
    
    /**
     * @param MySecureAccount_Lib_Remote_Invoker_ReadService $readService
     * @param MySecureAccount_Lib_Remote_Invoker_WriteService $writeService
     */
    public function __construct(
        MySecureAccount_Lib_Remote_Invoker_ReadService $readService,
        MySecureAccount_Lib_Remote_Invoker_WriteService $writeService
    )
    {
        $this->_readService = $readService;
        $this->_writeService = $writeService;
    }
    
	/**
     * Return account information
     * 
     * Return:
     *  - account-inforamtion
     *  - account-owner-information
     *  - account-owner-emails
     *  - passwords
     *  
     *  - isLoged
     * 
     * @param string $emailAddress
     * 
     * @return array
     */
    public function getAccountInformation($emailAddress)
    {
        try{
            return $this->_readService->getAccountInformation($emailAddress);           
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }    
    }
    
	/**
     * Return all information about customer purchases
     * 
     * Return:
     *  - Product data
     *    - info (title required)
     *    - product-name 
     *  - Licenses 
     *    - used
     *    - free
     *  - Devices (can be empty array)
     *    - name
     *    - info   
     *    
     * 
     * @param string $emailAddress
     * @param array $tags
     * 
     * @return array
     */
    public function getAccountProductsInformation($emailAddress, array $tags = array())
    {
        try{
            return $this->_readService->getAccountProductsInformation($emailAddress, $tags);           
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }   
    }
        
    /**
     * Return all devices that belongs to custom account
     * 
     * Return:
     *  - Device data
     *    - name
     *    - info
     *  - Product data (can be empty array)
     *    - info (title required)
     *    - product-name 
     *    - license
     * 
     * @param string $emailAddress
     * @param array $tags
     * 
     * @return array
     */
    public function getAccountDevicesInformation($emailAddress, array $tags = array())
    {
        try{
            return $this->_readService->getAccountDevicesInformation($emailAddress, $tags);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }   
    }
    
    /**
     * Create new account
     * 
     * ownerInformation keys:
     *  - string $firstName
     *  - string $lastName
     *  - string $dateOfBirth
     *  - string $gender
     *  - string $nickName
     *  - string $mobileNumber
     *  - string $homeNumber
     *  - string $additionalInformation
     *  
     * deliveryInformation keys:
     *  - string $country
     *  - string $city
     *  - string $postCode
     *  - string $street
     *  - string $houseNumber
     *  - string $secondAddressLine
     *  - string $thirdAddressLine
     *  - string $additionalInformation 
     *  
     * settings keys:
     *  - locale keys:
     *    - array country 
     *       - string code
     *       - string title
     *    - array language 
     *       - string code
     *       - string title
     * 
     * @param string $customerEmail
     * @param string $password
     * @param string $passwordAgain
     * @param array $ownerInformation
     * @param array $deliveryInformation
     * @param array $settings
     * @param boolean $passwordAutoGenerated
     * 
     * @return void
     */
    public function setupAccount(
        $customerEmail, 
        $password, 
        $passwordAgain, 
        array $ownerInformation = array(),
        array $deliveryInformation = array(),
        array $settings = array(),
        $passwordAutoGenerated = false
    )
    {
        try{
            $this->_writeService->setupAccount(
                $customerEmail, 
                $password, 
                $passwordAgain,
                $ownerInformation,
                $deliveryInformation,
                $settings,
                $passwordAutoGenerated
            );     
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }
         
    /**
     * Activate account by confirmg primary email address
     * 
     * @param string $customerEmail
     * @param string $activationKey
     * 
     * @return void
     */
    public function activateAccount($customerEmail, $activationKey)
    {
        try{
            $this->_writeService->activateAccount($customerEmail, $activationKey);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }
         
    /**
     * Authenticate customer
     *
     * @param string $customerEmail
     * @param string $password
     * 
     * @return void
     */
    public function login($customerEmail, $password)
    {
        try{
            $this->_writeService->login($customerEmail, $password);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }
    
    /**
     * Logout customer
     * 
     * @param string $customerEmail
     * 
     * @return void
     */
    public function logout($customerEmail)
    {
        try{
            $this->_writeService->logout($customerEmail);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }
    
	/**
     * Reset password
     * 
     * @param string $customerEmail
     * 
     * @return void
     */
    public function remindPassword($customerEmail)
    {
        try{
            $this->_writeService->remindPassword($customerEmail);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }         
    
    /**
     * Remind email activation key
     * 
     * @param string $customerEmail
     * 
     * @return void
     */
    public function remindActivationKey($customerEmail)
    {
        try{
            $this->_writeService->remindActivationKey($customerEmail);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }         
    
	/**
     * Delete account
     * 
     * @param string $customerEmail
     * 
     * @return void
     */
    public function deleteAccount($customerEmail)
    {
        try{
            $this->_writeService->deleteAccount($customerEmail);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }         
    
	/**
     * Chnage password
     * 
     * @param string $customerEmail
     * @param string $password
     * 
     * @return void
     */
    public function changePassword($customerEmail, $password)
    {
        try{
            $this->_writeService->changePassword($customerEmail, $password);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }         
      
    /**
     * Update customer details (Array structure see at setupAccount doc block)
     * 
     * @param string $customerEmail
     * @param array $customerDetails
     * 
     * @return void
     */
    public function updateCustomerDetails($customerEmail, array $customerDetails)
    {
        try{
            $this->_writeService->updateCustomerDetails($customerEmail, $customerDetails);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }          
    }
    
    /**
     * Update customer delivery details (Array structure see at setupAccount doc block)
     * 
     * @param string $customerEmail
     * @param array $customerDeliveryDetails
     * 
     * @return void
     */
    public function updateCustomerDeliveryDetails($customerEmail, array $customerDeliveryDetails)
    {
        try{
            $this->_writeService->changeDeliveryAddress($customerEmail, $customerDeliveryDetails);
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }

    
    /**
     * Create new products in account
     * 
     * Available product names:
     *  - my-theft-protection
     *  - my-mobile-theft-protection
     * 
     * products:
     *  array(
     *      'my-theft-protection' =>
     *      array(
     *          'my-theft-protection',
     *          'MyTheftProtection title',
     *          '1', // version
     *          '12', // duration
     *          'license-2', // license code
     *          'full', // license type
     *          array() // additional things
     *      ),
     *  )
     *   
     * @param string $customerEmail
     * @param array $products
     * 
     * @return void
     */
    public function addNewProductsInAccount($customerEmail, array $products)
    {
        try{
            $this->_writeService->addProductsToAccount(
                $customerEmail, 
                $products
            );       
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }         
    }
      
    /**
     * Create new devices
     * If email address is passed it will be assigned to account
     * 
     * array(
     *      'iphone' => array(
     *           'deviceName' => 'iphone',
     *           'deviceTitle' => 'With spaces',
     *           'deviceType' => 'MOBILE', // getConstants()
     *           'operatingSystem' => 'NA', // getConstants()
     *           'operatingSystemType' => 'NA', // getConstants()
     *           'settings' => array(
     *               'my-mobile-theft-protection' => array(
     *                   'settings' => '<?xml version="1.0" encoding="UTF-8" standalone="yes" ?><Settings/>'
     *               ),
     *           ),
     *       ),
     *       'laptop' => array(
     *           'deviceName' => 'laptop',
     *           'deviceTitle' => 'With spaces',
     *           'deviceType' => 'LAPTOP', // getConstants()
     *           'operatingSystem' => 'WINDOWS', // getConstants()
     *           'operatingSystemType' => 'OS_64', // getConstants()
     *           'settings' => array(
     *           ),
     *       ),
     *   )
     * 
     * @param string $customerEmail
     * @param array $devices
     * 
     * @return void
     */
    public function addNewDevicesInAccount($customerEmail, array $devices)
    {
        try{
            $this->_writeService->addDevicesToAccount(
                $customerEmail, $devices
            );
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }     
    }

    /**
     * Updated device details
     * 
     * 'deviceTitle' => 'With spaces',
     * 'deviceType' => 'MOBILE', // getConstants()
     * 'operatingSystem' => 'NA', // getConstants()
     * 'operatingSystemType' => 'NA', // getConstants()
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * @param array $deviceDetails
     * 
     * @return void
     */
    public function updateDeviceDetails($customerEmail, $deviceName, array $deviceDetails)
    {
        try{
            $this->_writeService->updateDeviceDetails(
                $customerEmail, $deviceName, $deviceDetails
            );
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }
    
    /**
     * Delete device
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * 
     * @return void
     */
    public function deleteDevice($customerEmail, $deviceName)
    {
        try{
            $this->_writeService->deleteDevice(
                $customerEmail, $deviceName
            );
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }
    
    /**
     * Install product on device
     * 
     * Installation settings for mobile anti-theft
     * 
     * 'my-mobile-theft-protection' => array(
     *   'deviceNumber' => '00370682575465',
     *   'devicePin' => '1234',
     *   'settings' => '<?xml version="1.0" encoding="UTF-8" standalone="yes" ?><Settings/>'
     * ),
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * @param string $productName
     * @param string $license
     * @param array $settings
     * 
     * @return void
     */
    public function installProductOnDevice(
        $customerEmail, 
        $deviceName, 
        $productName, 
        $license, 
        array $settings = array()
    )
    {
        try{
            $this->_writeService->installProductForAccountOnDevice(
                $customerEmail, 
                $deviceName, 
                $productName, 
                $license,
                $settings
            );    
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }           
    }
    
    /**
     * Uninstall product from device
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * @param string $productName
     * @param array $settings
     * 
     * @return void
     */
    public function uninstallProductFromDevice(
        $customerEmail, 
        $deviceName, 
        $productName,
        array $settings = array()
    )
    {
        try{
            $this->_writeService->uninstallProductForAccountFromDevice(
                $customerEmail, 
                $deviceName, 
                $productName, 
                $settings
            ); 
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }   
    }
    
    /**
     * Reinstall product from device
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * @param string $productName
     * @param array $settings
     * 
     * @return void
     */
    public function reinstallProductOnDevice(
        $customerEmail, 
        $deviceName, 
        $productName,
        array $settings = array()
    )
    {
        try{
            $this->_writeService->reinstallProductForAccountOnDevice(
                $customerEmail, 
                $deviceName, 
                $productName, 
                $settings
            ); 
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }   
    }
        
    /**
     * Move product installation from device A to device B
     * 
     * @param string $customerEmail
     * @param string $fromDeviceName
     * @param string $toDeviceName
     * @param string $productName
     * @param array $settings
     * 
     * @return void
     */
    public function transferProductInstallation(
        $customerEmail, 
        $fromDeviceName, 
        $toDeviceName, 
        $productName,
        array $settings = array()
    )
    {
        try{
            $this->_writeService->transferProductInstallation(
                $customerEmail, 
                $fromDeviceName, 
                $toDeviceName, 
                $productName,
                $settings
            ); 
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }
    
    /**
     * @param string $customerEmail
     * @param string $deviceName
     * @param array $settings
     * 
     * @return void
     */
    public function changeDeviceDefaultSettings(
        $customerEmail, 
        $deviceName, 
        array $settings
    )
    {
        try{
            $this->_writeService->changeDeviceDefaultSettings(
                $customerEmail, 
                $deviceName, 
                $settings
            ); 
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }
        
    /**
     * Return available constants
     * 
     * @return array
     */
    public function getConstants()
    {
        try{
            $this->_readService->getConstants();
        } catch(Exception $ex) {
            throw new SoapFault('0', $ex->getMessage());
        }        
    }
}