<?php
class MySecureAccount_Lib_Remote_Invoker_WriteService
{
    /**
     * @var MySecureAccount_Lib_Service_Write_AccountManagementService
     */
    protected $_accountManagementWriteService;
    
    /**
     * @var MySecureAccount_Lib_Service_Write_AuthService
     */
    protected $_authWriteService;
    
    /**
     * @var MySecureAccount_Lib_Service_Write_ProductsManagementService
     */
    protected $_productsManagementWriteService;
    
    /**
     * @var MySecureAccount_Lib_Service_Write_DeviceManagementService
     */
    protected $_deviceManagementWriteService;

    /**
     * @param MySecureAccount_Lib_Service_Write_AccountManagementService $accountManagementWriteService
     * @param MySecureAccount_Lib_Service_Write_AuthService $authWriteService
     * @param MySecureAccount_Lib_Service_Write_ProductsManagementService $productsManagementWriteService
     * @param MySecureAccount_Lib_Service_Write_DeviceManagementService $deviceManagementWriteService
     */
    public function __construct(
        MySecureAccount_Lib_Service_Write_AccountManagementService $accountManagementWriteService,
        MySecureAccount_Lib_Service_Write_AuthService $authWriteService,
        MySecureAccount_Lib_Service_Write_ProductsManagementService $productsManagementWriteService,
        MySecureAccount_Lib_Service_Write_DeviceManagementService $deviceManagementWriteService
    )
    {
        $this->_accountManagementWriteService = $accountManagementWriteService;        
        $this->_authWriteService = $authWriteService;        
        $this->_productsManagementWriteService = $productsManagementWriteService;        
        $this->_deviceManagementWriteService = $deviceManagementWriteService;        
    }
    
    /**
     * Create new account
     * 
     * $ownerInformation keys:
     *  - string $firstName
     *  - string $lastName
     *  - string $dateOfBirth
     *  - string $gender
     *  - string $nickName
     *  - string $mobileNumber
     *  - string $homeNumber
     *  - string $additionalInformation
     *  
     * $deliveryInformation keys:
     *  - string $country
     *  - string $city
     *  - string $postCode
     *  - string $street
     *  - string $houseNumber
     *  - string $secondAddressLine
     *  - string $thirdAddressLine
     *  - string $additionalInformation 
     *  
     * $settings keys:
     *  - locale keys:
     *    - array country 
     *       - string code
     *       - string title
     *    - array language 
     *       - string code
     *       - string title
     * 
     * @param string $email
     * @param string $password
     * @param string $passwordAgain
     * @param array $ownerInformation
     * @param array $deliveryInformation
     * @param array $settings
     * @param boolean $isAutoGenerated
     * 
     * @return void
     */
    public function setupAccount(
        $email, 
        $password, 
        $passwordAgain, 
        array $ownerInformation = array(),
        array $deliveryInformation = array(),
        array $settings = array(),
        $isAutoGenerated = false
    )
    {
        $this->_accountManagementWriteService->createNewAccount(
            $email, 
            $password, 
            $passwordAgain, 
            $ownerInformation, 
            $deliveryInformation, 
            $settings,
            $isAutoGenerated
        );
    }
         
	/**
     * Activate account by confirmg primary email address
     * 
     * @param string $email
     * @param string $activationKey
     * 
     * @return void
     */
    public function activateAccount($email, $activationKey)
    {
        $this->_authWriteService->activateAccount($email, $activationKey);
    }
         
	/**
     * Login
     * 
     * @param string $email
     * @param string $password
     * 
     * @return void
     */
    public function login($email, $password)
    {
        $this->_authWriteService->login($email, $password);
    }
    
    /**
     * Logout
     * 
     * @param string $email
     */
    public function logout($email)
    {
        $this->_authWriteService->logout($email);
    }
    
    /**
     * Remind password
     * 
     * @param string $emailAddress
     */
    public function remindPassword($email)
    { 
        $this->_accountManagementWriteService->remindPassword($email);
    }
    
    /**
     * @param string $emailAddress
     */
    public function remindActivationKey($emailAddress)
    { 
        $this->_accountManagementWriteService->remindActivationKey($emailAddress);
    }
    
  	/**
     * Delete account
     * 
     * @param string $customerEmail
     * 
     * @return void
     */
    public function deleteAccount($customerEmail)
    {
        $this->_accountManagementWriteService->removeAccount($customerEmail);          
    }  
    
    /**
     * Change password
     * 
     * @param string $emailAddress
     * @param string $password
     */
    public function changePassword($email, $password)
    { 
        $this->_accountManagementWriteService->changePassword($email, $password);
    }
    
    /**
     * Update customer details (Array structure see at setupAccount doc block)
     * 
     * @param string $customerEmail
     * @param array $customerDetails
     * 
     * @return void
     */
    public function updateCustomerDetails($customerEmail, array $customerDetails)
    {    
        $this->_accountManagementWriteService->changeAccountOwnerPersonalInformation(
            $customerEmail, $customerDetails
        );
    }
    
    /**
     * Change delivery address
     * 
     * @param string $customerEmail
     * @param array $customerDeliveryDetails
     */
    public function changeDeliveryAddress($customerEmail, array $customerDeliveryDetails)
    {
        $this->_accountManagementWriteService->changeAccountOwnerDeliveryInformation(
            $customerEmail, $customerDeliveryDetails
        );       
    }
    
    /**
     * Add products to account
     * 
     * @param string $email
     * @param array $productsInformation
     */
    public function addProductsToAccount($email, array $productsInformation)
    {
        $this->_productsManagementWriteService->addNewProductsInAccount(
            $email, 
            $productsInformation
        );       
    }
    
    /**
     * Add new device to account
     * 
     * @param string $email
     * @param array $devicesInformation
     */
    public function addDevicesToAccount($email, array $devicesInformation)
    {
        $this->_deviceManagementWriteService->addNewDevicesInAccount(
            $email, $devicesInformation
        );        
    }
    
    /**
     * Updated device details
     * 
     * 'deviceTitle' => 'With spaces',
     * 'deviceType' => 'MOBILE', // getConstants()
     * 'operatingSystem' => 'NA', // getConstants()
     * 'operatingSystemType' => 'NA', // getConstants()
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * @param array $deviceDetails
     * 
     * @return void
     */
    public function updateDeviceDetails($customerEmail, $deviceName, array $deviceDetails)
    {    
        $this->_deviceManagementWriteService->changeDeviceDetails(
            $customerEmail, $deviceName, $deviceDetails
        ); 
    }
    
    /**
     * Delete device
     * 
     * @param string $customerEmail
     * @param string $deviceName
     * 
     * @return void
     */
    public function deleteDevice($customerEmail, $deviceName)
    {
        throw new Exception("Not implemented");
    }
    
    /**
     * Install product on device for given account
     * 
     * @param string $accountEmailAddress
     * @param string $deviceName
     * @param string $productName
     * @param string $license
     * @param array $settings
     */
    public function installProductForAccountOnDevice(
        $accountEmailAddress, 
        $deviceName, 
        $productName, 
        $license,
        array $settings = array()
    )
    {
        $this->_deviceManagementWriteService->installProductOnDevice(
            $accountEmailAddress, 
            $deviceName, 
            $productName, 
            $license,
            $settings
        );       
    }
    
    /**
     * Uninstall product on device for given account
     * 
     * @param string $accountEmailAddress
     * @param string $deviceName
     * @param string $productName
     * @param array $settings
     */
    public function uninstallProductForAccountFromDevice(
        $accountEmailAddress, 
        $deviceName, 
        $productName, 
        array $settings = array()
    )
    {
        $this->_deviceManagementWriteService->uninstallProductFromDevice(
            $accountEmailAddress, 
            $deviceName, 
            $productName, 
            $settings
        );       
    }
    
    /**
     * Uninstall product on device for given account
     * 
     * @param string $accountEmailAddress
     * @param string $deviceName
     * @param string $productName
     * @param array $settings
     */
    public function reinstallProductForAccountOnDevice(
        $accountEmailAddress, 
        $deviceName, 
        $productName, 
        array $settings = array()
    )
    {
        $this->_deviceManagementWriteService->reinstallProductOnDevice(
            $accountEmailAddress, 
            $deviceName, 
            $productName, 
            $settings
        );       
    }
      
    /**
     * Move product installation from device A to device B
     * 
     * @param string $customerEmail
     * @param string $fromDeviceName
     * @param string $toDeviceName
     * @param string $productName
     * @param string $license
     * @param array $settings (optional)
     * 
     * @return void
     */
    public function transferProductInstallation(
        $customerEmail, 
        $fromDeviceName, 
        $toDeviceName, 
        $productName,
        array $settings = array()
    )
    {
        throw new Exception("Not implemented");        
    }
    
    /**
     * @param string $customerEmail
     * @param string $deviceName
     * @param array $settings
     * 
     * @return void
     */
    public function changeDeviceDefaultSettings(
        $customerEmail, 
        $deviceName, 
        array $settings
    )
    {
        throw new Exception("Not implemented");        
    }
            
    /**
     * Remove account
     * 
     * @param string $email
     */
    public function removeAccount($email)
    {
        throw new Exception("Not implemented");
    }
    
    /**
     * Change account owner personal details
     * 
     * @param string $email
     * @param array $ownerInformation
     */
    public function changeAccountOwnerInformation($email, array $ownerInformation)
    {
        throw new Exception("Not implemented");
    }
    
    /**
     * Change account shipping details
     * 
     * @param string $email
     * @param array $deliveryInformation
     */
    public function changeAccountShippingInformation($email, array $deliveryInformation)
    {
        throw new Exception("Not implemented");
    }
    
    /**
     * Remove device from account
     * 
     * @param string $email
     * @param string $deviceId
     */
    public function removeDeviceFromAccount($email, $deviceId)
    {
        throw new Exception("Not implemented");
    }
        
    /**
     * Assign email to account
     * 
     * @param string $primaryEmail
     * @param string $newEmail
     */
    public function assignEmailToAccount($primaryEmail, $newEmail)
    { 
        throw new Exception("Not implemented");
    }
        
    /**
     * Remove email from account
     * 
     * @param string $primaryEmail
     * @param string $emailToRemove
     */    
    public function removeEmailFromAccount($primaryEmail, $emailToRemove)
    { 
        throw new Exception("Not implemented");
    }
        
    /**
     * Change primary email 
     * 
     * @param string $oldPrimaryEmail
     * @param string $newPrimaryEmail
     */    
    public function changePrimaryEmail($oldPrimaryEmail, $newPrimaryEmail)
    { 
        throw new Exception("Not implemented");
    }
    
    /**
     * Merge accounts into one
     * 
     * @param string $primaryAccountEmail
     * @param string $secondaryAccountEmail
     */
    public function mergeAccounts($primaryAccountEmail, $secondaryAccountEmail)
    { 
        throw new Exception("Not implemented");
    }
}